---
- hosts: maas
  become: yes
  gather_facts: no
  vars:
    libvirt_connector_address: http://192.168.121.1:5000
    virtual_machines:
      - name: node-alpha
        uuid: "52668ec5-a4bd-4658-b978-9f32cc4cfd15"
        mac_address: "52:54:00:6a:58:9c"
        vcpus: 2
        memory: 4096
      - name: node-beta
        uuid: "20c56994-2f71-4a8e-a2ca-925a1e9ed4c1"
        mac_address: "52:54:00:bd:4f:a1"
        vcpus: 2
        memory: 4096
  tasks:
    - name: Libvirt | List VMs
      delegate_to: localhost
      virt:
        command: list_vms
      register: libvirt_vms_list
      changed_when: false

    - name: Libvirt | Create VMs
      delegate_to: localhost
      command: "virt-install --pxe --boot network --network bridge=virbr1 --os-variant ubuntu22.04 --name {{ item.name }} --memory {{ item.memory }} --vcpus {{ item.vcpus }} --wait 0"
      loop: "{{ virtual_machines }}"
      changed_when: true
      when: item.name is not in libvirt_vms_list.list_vms

    - name: Libvirt | List VMs
      delegate_to: localhost
      virt:
        command: list_vms
      register: libvirt_vms_list
      changed_when: false

    - name: Libvirt | Retrieve VMs infos
      delegate_to: localhost
      set_fact:
        libvirt_info_vms: "{{ lookup('libvirt_lookup', vms=vms_list ) }}"
      vars:
        vms_list: "{{ libvirt_vms_list.list_vms | reject('equalto', 'attivita-progettuale_maas') | list }}"

    - name: MAAS | Retrieve machines list
      shell: "maas admin machines read | jq -r '[.[] | {system_id: .system_id, mac_addresses: .interface_set[].mac_address}]'"
      changed_when: false
      register: maas_machines_command
      until: maas_machines_command.stdout != "[]"
      retries: 48
      delay: 10

    - name: MAAS | Set machines infos fact
      set_fact:
        maas_info_vms: "{{ maas_machines_command.stdout | from_json }}"

    # TODO: Fix out of order vms
    - name: MAAS | Match MAAS machines with Libvirt machines
      delegate_to: localhost
      set_fact:
        info_vms: "{{ info_vms|default([]) + [{ 'libvirt_name': item.0.name, 'maas_id': item.1.system_id }] }}"
      when: item.0['mac_address'] == item.1['mac_addresses']
      with_together:
        - "{{ libvirt_info_vms }}"
        - "{{ maas_info_vms }}"

    - debug:
        var: info_vms

    - name: Libvirt | Waiting for connector to be ready, please run "scripts/libvirt-connector.py"
      uri:
        url: "{{ libvirt_connector_address }}/ready"
        return_content: yes
        validate_certs: no
        status_code:
          - 200
      register: libvirt_connector_output
      until: libvirt_connector_output.status == 200
      retries: 24
      delay: 5

    - name: MAAS | Retrieve current power parameters
      shell: maas admin machines power-parameters | jq
      changed_when: false
      register: maas_power_parameters_command

    - name: MAAS | Update power configuration
      command: "maas admin machine update {{ item.maas_id }} power_type=webhook power_parameters='{{ updated_power_params | to_json }}'"
      loop: "{{ info_vms }}"
      vars:
        current_power_params: "{{ (maas_power_parameters_command.stdout | from_json)[item.maas_id] }}"
        updated_power_params:
          power_on_uri: "{{ libvirt_connector_address }}/start/{{ item.libvirt_name }}"
          power_off_uri: "{{ libvirt_connector_address }}/stop/{{ item.libvirt_name }}"
          power_query_uri: "{{ libvirt_connector_address }}/status/{{ item.libvirt_name }}"
      when: >
        current_power_params.power_on_uri != updated_power_params.power_on_uri or
        current_power_params.power_off_uri != updated_power_params.power_off_uri or
        current_power_params.power_query_uri != updated_power_params.power_query_uri
